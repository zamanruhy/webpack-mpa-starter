@use "variables" as *;
@use "functions" as *;

@mixin font-face($name, $path, $weight: null, $style: null, $exts: woff2 woff) {
  $src: null;

  @each $ext in $exts {
    $src: append(
      $src,
      url(quote($path + "." + $ext)) format(quote($ext)),
      comma
    );
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    font-display: swap;
    src: $src;
  }
}

@mixin truncate($lines: 1, $line-height) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    max-height: calc(#{$lines} * #{$line-height} * 1em);
    line-height: $line-height;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

@mixin visually-hidden() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

@mixin up($min) {
  @if type-of($min) == string {
    $min: map-get($breakpoints, $min);
  }

  @if $min > 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin down($max) {
  @if type-of($max) == string {
    $max: map-get($breakpoints, $max) - 1;
  }

  @if $max > 0 {
    @media (max-width: $max) {
      @content;
    }
  }
}

@mixin between($min, $max) {
  @include up($min) {
    @include down($max) {
      @content;
    }
  }
}

@mixin focus-ring($width: 3px, $offset: 2px) {
  outline: $width solid #f2ab24;
  outline-offset: $offset;
}

@mixin steps(
  $property,
  $value-start,
  $value-end,
  $width-start,
  $width-end,
  $step: 1px
) {
  $count: ($value-end - $value-start) / $step;
  $width-step: ($width-end - $width-start) / $count;
  $max-bp: $width-end - $width-step / 2;

  @include up($max-bp) {
    #{$property}: $value-end;
  }

  @for $n from 1 through $count {
    @include down($max-bp - ($n - 1) * $width-step - 1) {
      #{$property}: $value-end - $n * $step;
    }
  }
}
